<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd" default-autowire="byName">
	<!-- 1、注解的自动扫描，表示组件（如：@controler，@Service，@Repository，@Resource等）的扫描 -->   
	<context:component-scan base-package="com.cjsf.wfma.*"></context:component-scan>  
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	    <property name="driverClass" value="com.mysql.jdbc.Driver" /> 
	    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/wfma"/>  
	    <property name="user" value="root"/>
	    <property name="password" value="helloser"/>
	    <!--连接池中保留的最小连接数。-->  
	    <property name="minPoolSize" value="5" />
	    <!--连接池中保留的最大连接数。Default: 15 -->  
	    <property name="maxPoolSize" value="30" />  
	    <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
	    <property name="initialPoolSize" value="10"/>  
	    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
	    <property name="maxIdleTime" value="60"/>  
	    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->  
	    <property name="acquireIncrement" value="5" />  
	    <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements    
	        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。    
	        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->  
	    <property name="maxStatements" value="0" />  
	    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->  
	    <property name="idleConnectionTestPeriod" value="60" />  
	    <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
	    <property name="acquireRetryAttempts" value="30" />  
	    <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效    
	        保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试    
	        获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->  
	    <property name="breakAfterAcquireFailure" value="true" />
	</bean>
	
	<!-- 3、MyBatis -->  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	     <property name="dataSource" ref="dataSource" />    
	     <!-- <property name="configLocation" value="classpath:mybatis.cfg.xml"/> -->
	     <property name="mapperLocations" value="classpath:com/cjsf/wfma/bean/mappingxml/*Mapper.xml"></property>    
	</bean>
	
	
	<!--4、创建事务管理器，由spring负责创建  -->
	<!-- 声明试事务 -->
	<!-- 配置事务管理器 --> 
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 使用事务的方法，配置事务的传播特性 -->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<!-- 如果往数据库中写入信息就会报错 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 5、使用注解的形式管理事务 
	<tx:annotation-driven transaction-manager="txManager"/>
	 --> 
	<!-- 公共业务aop -->
	
	<bean id="log" class="com.cjsf.wfma.util.Log"/>
	<aop:config>
		<aop:pointcut expression="execution(* com.cjsf.wfma.service.impl.*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
	
	<!-- 自定义类实现aop -->
	<!-- 
	<bean id="zdy" class="com.cjsf.wfma.util.LogInfo"/>
	<aop:config>
		<aop:aspect ref="zdy">
			<aop:pointcut expression="execution(* com.cjsf.wfma.service.impl.*.*(..))" id="pointcut"/>
			<aop:before method="before" pointcut-ref="pointcut"/>
			<aop:after method="after" pointcut-ref="pointcut"/>
		</aop:aspect>
	</aop:config>
	  -->
	  <!-- <import resource="comfig/spring/user.xml"/> -->
</beans>